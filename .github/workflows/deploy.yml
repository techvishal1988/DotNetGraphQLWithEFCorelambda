name: Creating the build and artifacts
on:
  push:
    branches: [ main ]
    tags:
      - '*'
defaults:
  run:
    working-directory: ./OrganizationSolution/Source/App/Geography.Serverless
jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}     
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install AWS CLI v2
      run: |
          echo $updated_env_vars
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
          sudo apt-get update && sudo apt-get install jq -y
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: dotnet tool install
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Restore dependencies
      run: dotnet restore Geography.Serverless.csproj
    - name: Build
      run: dotnet build Geography.Serverless.csproj
    - name: Publish
      run: |
           ls
           dotnet publish -c Release -r linux-x64 -o publish
           ls publish
           dotnet lambda package
    - name: Upload to S3
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Zip Artifact
      run:  |
           find ./ -mindepth 1 -maxdepth 1 ! -name publish -type d -exec rm -r {} +
           cd publish 
           mv * ./../ 
           cd ..
           rm -rf publish/
           zip -r geography.zip ./*
    - name: Copy Artifact to S3
      run: aws s3 cp geography.zip s3://hackathondotnet1/      
    - name: Set up Git
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Create Release Tag
      run: |
        # Get the latest commit SHA
        COMMIT_SHA=$(git rev-parse --short HEAD)

        # Create a release tag with the commit SHA as the tag name
        git tag -a $COMMIT_SHA -m "Release $COMMIT_SHA"
        git push origin $COMMIT_SHA

  dev-deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    environment: dev
    steps:
      - name: Fetching the deployment repo
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: dev-deploy
          workflow: dev-deploy
          repository: techvishal1988/deployment
          token: ${{ secrets.YOUR_SECRET_NAME }}
          client-payload: '{"env_name": "${{ secrets.lambda }}"}'
  prod-deploy:
    runs-on: ubuntu-latest
    needs: [build,dev-deploy]
    if: github.event_name != 'pull_request'
    environment: production
    steps:
      - name: Fetching the deployment repo
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: prod-deploy
          workflow: prod-deploy
          repository: techvishal1988/deployment
          token: ${{ secrets.YOUR_SECRET_NAME }}
          client-payload: '{"env_name": "${{ secrets.lambda }}"}'
